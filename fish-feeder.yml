# esp home config
esphome:
  name: fishfeeder
  platform: ESP32
  board: esp32cam  
  on_boot:
    priority: -100
    then:
      - lambda: !lambda |-
          id(servoSlider1).make_call().set_value(-90).perform();
#Enable logging
logger:

web_server:
  port: 80

# Enable Home Assistant API
api:
  encryption:
    key: "9BeiO7tn/INzjELbwva00d07B1dBNRSIdbS/4N0We3s="
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: "ef63a394a45db657e9e3d7b945467d85"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Fish-Feeder-v2 Fallback Hotspot"
    password: "MM8ud5yCHKcI"

captive_portal:
    
# camera
# esp32_camera:
#   external_clock:
#     pin: GPIO0
#     frequency: 20MHz
#   i2c_pins:
#     sda: GPIO26
#     scl: GPIO27
#   data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
#   vsync_pin: GPIO25
#   href_pin: GPIO23
#   pixel_clock_pin: GPIO22
#   power_down_pin: GPIO32
#   name: Fish feeder cam

# Flashlight
# output:
#   - platform: gpio
#     pin: GPIO4
#     id: gpio_4

# GPIO_4 is the flash light pin
# light:
#   - platform: binary
#     output: gpio_4
#     name: flashlight


number:
  - platform: template
    id: servoSlider1
    name: Fish Feeder Servo
    icon: mdi:sync
    optimistic: true
    min_value: -90
    max_value: 90
    initial_value: -90
    step: 5
    on_value:
      then:
        - lambda: !lambda |-
            // Servo Write range is: -1.0 to 1.0, so divide by 100
            id(fish_feeder_servo).write(x / 90.0);

servo:
  - id: fish_feeder_servo
    output: pwm_output
    auto_detach_time: 5s
    min_level: 3.2%
    idle_level: 7.5%
    max_level: 12.7%  

# Example output platform
# On ESP32, use ledc output
output:
  - platform: ledc    
    id: pwm_output
    pin: 12
    frequency: 50 Hz

